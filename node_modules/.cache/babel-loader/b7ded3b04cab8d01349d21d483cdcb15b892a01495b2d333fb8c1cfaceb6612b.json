{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Games\\\\Desktop\\\\Homework\\\\vendia_project\\\\src\\\\DevicePage.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { vendiaClient } from \"./VendiaClient\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nexport const DevicePage = () => {\n  _s();\n  var _filteredTestList;\n  const [testList, setTestList] = useState();\n  const [rows, setRows] = useState();\n  useEffect(() => {\n    const filterTests = async () => {\n      const filteredTestList = await client.entities.test.list({\n        filter: {\n          Device: {\n            contains: 'Device1'\n          }\n        }\n      });\n      setTestList(filteredTestList === null || filteredTestList === void 0 ? void 0 : filteredTestList.items);\n      const rows = await (testList === null || testList === void 0 ? void 0 : testList.map(test => ({\n        id: test === null || test === void 0 ? void 0 : test.TestID,\n        OrgAssignment: test === null || test === void 0 ? void 0 : test.OrgAssignment,\n        TestName: test === null || test === void 0 ? void 0 : test.TestName,\n        TestMethod: test === null || test === void 0 ? void 0 : test.TestMethod,\n        Notes: test === null || test === void 0 ? void 0 : test.Notes,\n        Completed: boolToString(test === null || test === void 0 ? void 0 : test.Completed),\n        UpdatedBy: test === null || test === void 0 ? void 0 : test.UpdatedBy\n      })));\n      setRows(rows);\n    };\n    filterTests();\n  }, []);\n  console.log((_filteredTestList = filteredTestList) === null || _filteredTestList === void 0 ? void 0 : _filteredTestList.items);\n  const boolToString = value => {\n    if (typeof value === 'boolean') return 'true';else return 'false';\n  };\n  const columns = [{\n    field: 'id',\n    headerName: 'TestID',\n    width: 90\n  }, {\n    field: 'OrgAssignment',\n    headerName: 'OrgAssignment',\n    width: 150\n  }, {\n    field: 'TestName',\n    headerName: 'TestName',\n    width: 90\n  }, {\n    field: 'TestMethod',\n    headerName: 'TestMethod',\n    width: 90\n  }, {\n    field: 'Notes',\n    headerName: 'Notes',\n    width: 90\n  }, {\n    field: 'Completed',\n    headerName: 'Completed',\n    width: 90\n  }, {\n    field: 'UpdatedBy',\n    headerName: 'UpdatedBy',\n    width: 90\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DevicePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Device1 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(DevicePage, \"UDzcDHXc65rkqW2TKgBKUCYO4OA=\");\n_c = DevicePage;\nvar _c;\n$RefreshReg$(_c, \"DevicePage\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","DataGrid","jsxDEV","_jsxDEV","client","DevicePage","_s","_filteredTestList","testList","setTestList","rows","setRows","filterTests","filteredTestList","entities","test","list","filter","Device","contains","items","map","id","TestID","OrgAssignment","TestName","TestMethod","Notes","Completed","boolToString","UpdatedBy","console","log","value","columns","field","headerName","width","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/src/DevicePage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./VendiaClient\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nconst { client } = vendiaClient();\r\n\r\n\r\nexport const DevicePage = () => {\r\n\r\n    const[testList, setTestList] = useState();\r\n    const[rows, setRows] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        const filterTests = async () => {\r\n            const filteredTestList = await client.entities.test.list({\r\n                filter: {\r\n                  Device: {\r\n                    contains: 'Device1',\r\n                  }\r\n                },\r\n              })\r\n\r\n            setTestList(filteredTestList?.items);\r\n\r\n            const rows = await testList?.map((test) => ({\r\n                id: test?.TestID,\r\n                OrgAssignment: test?.OrgAssignment,\r\n                TestName: test?.TestName,\r\n                TestMethod: test?.TestMethod,\r\n                Notes: test?.Notes,\r\n                Completed: boolToString(test?.Completed),\r\n                UpdatedBy: test?.UpdatedBy\r\n                \r\n            }));\r\n            setRows(rows);\r\n\r\n\r\n            \r\n            \r\n            \r\n        }\r\n\r\n        \r\n        \r\n        filterTests();\r\n        \r\n    }, [])\r\n    console.log(filteredTestList?.items);\r\n\r\n\r\n    const boolToString = (value) =>\r\n    {\r\n        if(typeof(value) === 'boolean')\r\n            return 'true';\r\n        else\r\n            return 'false'\r\n    }\r\n    \r\n    const columns = [\r\n        {field: 'id', headerName: 'TestID', width: 90},\r\n        {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150},\r\n        {field: 'TestName', headerName: 'TestName', width: 90},\r\n        {field: 'TestMethod', headerName: 'TestMethod', width: 90},\r\n        {field: 'Notes', headerName: 'Notes', width: 90},\r\n        {field: 'Completed', headerName: 'Completed', width: 90},\r\n        {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90},\r\n    ];\r\n    \r\n    return(\r\n        \r\n        <div className=\"DevicePage\">\r\n            <h1> Device1 </h1>\r\n            <div>\r\n\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}