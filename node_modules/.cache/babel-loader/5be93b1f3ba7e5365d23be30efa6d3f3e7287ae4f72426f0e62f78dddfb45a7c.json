{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationModelSelector } from './gridPaginationSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getPageCount, noRowCountInServerMode, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from './gridPaginationUtils';\nexport const paginationStateInitializer = (state, props) => {\n  var _props$paginationMode, _props$initialState;\n  const paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_props$paginationMode = props.paginationModel) != null ? _props$paginationMode : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.pagination) == null ? void 0 : _props$initialState.paginationModel);\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);\n  return _extends({}, state, {\n    pagination: {\n      paginationModel\n    }\n  });\n};\nexport const mergeStateWithPaginationModel = (rowCount, signature, paginationModelProp) => paginationState => {\n  var _paginationModelProp$;\n  let paginationModel = paginationState.paginationModel;\n  const pageSize = (_paginationModelProp$ = paginationModelProp == null ? void 0 : paginationModelProp.pageSize) != null ? _paginationModelProp$ : paginationModel.pageSize;\n  const pageCount = getPageCount(rowCount, pageSize);\n  if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {\n    paginationModel = paginationModelProp;\n  }\n  const validPage = getValidPage(paginationModel.page, pageCount);\n  if (validPage !== paginationModel.page) {\n    paginationModel = _extends({}, paginationModel, {\n      page: validPage\n    });\n  }\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n  return {\n    paginationModel\n  };\n};\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridPagination = (apiRef, props) => {\n  var _props$initialState3;\n  const logger = useGridLogger(apiRef, 'useGridPagination');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'pagination',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setPage = React.useCallback(page => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (page === currentModel.page) {\n      return;\n    }\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setPaginationModel({\n      page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  const setPageSize = React.useCallback(pageSize => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setPaginationModel({\n      pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  const setPaginationModel = React.useCallback(paginationModel => {\n    var _props$rowCount;\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel === currentModel) {\n      return;\n    }\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount = props.rowCount) != null ? _props$rowCount : visibleTopLevelRowCount, props.signature, paginationModel), 'setPaginationModel');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.rowCount, props.signature, visibleTopLevelRowCount]);\n  const pageApi = {\n    setPage,\n    setPageSize,\n    setPaginationModel\n  };\n  useGridApiMethod(apiRef, pageApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const shouldExportPaginationModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `paginationModel` is controlled\n    props.paginationModel != null ||\n    // Always export if the `paginationModel` has been initialized\n    ((_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.pagination) == null ? void 0 : _props$initialState2.paginationModel) != null ||\n    // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, (_props$initialState3 = props.initialState) == null || (_props$initialState3 = _props$initialState3.pagination) == null ? void 0 : _props$initialState3.paginationModel, props.autoPageSize]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2, _props$rowCount2;\n    const paginationModel = (_context$stateToResto = context.stateToRestore.pagination) != null && _context$stateToResto.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : visibleTopLevelRowCount, props.signature, paginationModel), 'stateRestorePreProcessing');\n    return params;\n  }, [apiRef, props.autoPageSize, props.rowCount, props.signature, visibleTopLevelRowCount]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = () => {\n    var _apiRef$current$virtu;\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if ((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n    apiRef.current.forceUpdate();\n  };\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    var _props$rowCount3;\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount3 = props.rowCount) != null ? _props$rowCount3 : visibleTopLevelRowCount, props.signature, props.paginationModel));\n  }, [apiRef, props.paginationModel, props.rowCount, props.paginationMode, visibleTopLevelRowCount, props.signature]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};","map":{"version":3,"names":["_extends","React","gridFilteredTopLevelRowCountSelector","gridDensityFactorSelector","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","useGridRegisterPipeProcessor","gridPaginationModelSelector","calculatePinnedRowsHeight","getPageCount","noRowCountInServerMode","defaultPageSize","throwIfPageSizeExceedsTheLimit","getDefaultGridPaginationModel","getValidPage","paginationStateInitializer","state","props","_props$paginationMode","_props$initialState","paginationModel","autoPageSize","initialState","pagination","pageSize","signature","mergeStateWithPaginationModel","rowCount","paginationModelProp","paginationState","_paginationModelProp$","pageCount","page","validPage","useGridPagination","apiRef","_props$initialState3","logger","visibleTopLevelRowCount","densityFactor","rowHeight","Math","floor","current","registerControlState","stateId","propModel","propOnChange","onPaginationModelChange","stateSelector","changeEvent","setPage","useCallback","currentModel","debug","setPaginationModel","setPageSize","_props$rowCount","updateControlState","forceUpdate","pageApi","stateExportPreProcessing","prevState","context","_props$initialState2","shouldExportPaginationModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","_context$stateToResto2","_props$rowCount2","stateToRestore","handlePaginationModelChange","_apiRef$current$virtu","virtualScrollerRef","scrollToIndexes","rowIndex","handleUpdateAutoPageSize","dimensions","getRootDimensions","pinnedRowsHeight","maximumPageSizeWithoutScrollBar","viewportInnerSize","height","top","bottom","useEffect","process","env","NODE_ENV","paginationMode","_props$rowCount3"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridFilteredTopLevelRowCountSelector } from '../filter';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { gridPaginationModelSelector } from './gridPaginationSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getPageCount, noRowCountInServerMode, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from './gridPaginationUtils';\nexport const paginationStateInitializer = (state, props) => {\n  var _props$paginationMode, _props$initialState;\n  const paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_props$paginationMode = props.paginationModel) != null ? _props$paginationMode : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.pagination) == null ? void 0 : _props$initialState.paginationModel);\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);\n  return _extends({}, state, {\n    pagination: {\n      paginationModel\n    }\n  });\n};\nexport const mergeStateWithPaginationModel = (rowCount, signature, paginationModelProp) => paginationState => {\n  var _paginationModelProp$;\n  let paginationModel = paginationState.paginationModel;\n  const pageSize = (_paginationModelProp$ = paginationModelProp == null ? void 0 : paginationModelProp.pageSize) != null ? _paginationModelProp$ : paginationModel.pageSize;\n  const pageCount = getPageCount(rowCount, pageSize);\n  if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {\n    paginationModel = paginationModelProp;\n  }\n  const validPage = getValidPage(paginationModel.page, pageCount);\n  if (validPage !== paginationModel.page) {\n    paginationModel = _extends({}, paginationModel, {\n      page: validPage\n    });\n  }\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n  return {\n    paginationModel\n  };\n};\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridPagination = (apiRef, props) => {\n  var _props$initialState3;\n  const logger = useGridLogger(apiRef, 'useGridPagination');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'pagination',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setPage = React.useCallback(page => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (page === currentModel.page) {\n      return;\n    }\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setPaginationModel({\n      page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  const setPageSize = React.useCallback(pageSize => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setPaginationModel({\n      pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  const setPaginationModel = React.useCallback(paginationModel => {\n    var _props$rowCount;\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel === currentModel) {\n      return;\n    }\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount = props.rowCount) != null ? _props$rowCount : visibleTopLevelRowCount, props.signature, paginationModel), 'setPaginationModel');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.rowCount, props.signature, visibleTopLevelRowCount]);\n  const pageApi = {\n    setPage,\n    setPageSize,\n    setPaginationModel\n  };\n  useGridApiMethod(apiRef, pageApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const shouldExportPaginationModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `paginationModel` is controlled\n    props.paginationModel != null ||\n    // Always export if the `paginationModel` has been initialized\n    ((_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.pagination) == null ? void 0 : _props$initialState2.paginationModel) != null ||\n    // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, (_props$initialState3 = props.initialState) == null || (_props$initialState3 = _props$initialState3.pagination) == null ? void 0 : _props$initialState3.paginationModel, props.autoPageSize]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2, _props$rowCount2;\n    const paginationModel = (_context$stateToResto = context.stateToRestore.pagination) != null && _context$stateToResto.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : visibleTopLevelRowCount, props.signature, paginationModel), 'stateRestorePreProcessing');\n    return params;\n  }, [apiRef, props.autoPageSize, props.rowCount, props.signature, visibleTopLevelRowCount]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = () => {\n    var _apiRef$current$virtu;\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if ((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n    apiRef.current.forceUpdate();\n  };\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    var _props$rowCount3;\n    apiRef.current.updateControlState('pagination', mergeStateWithPaginationModel((_props$rowCount3 = props.rowCount) != null ? _props$rowCount3 : visibleTopLevelRowCount, props.signature, props.paginationModel));\n  }, [apiRef, props.paginationModel, props.rowCount, props.paginationMode, visibleTopLevelRowCount, props.signature]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}