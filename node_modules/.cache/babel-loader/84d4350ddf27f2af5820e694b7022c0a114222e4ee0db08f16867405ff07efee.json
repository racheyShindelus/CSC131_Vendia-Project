{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Games\\\\Desktop\\\\Homework\\\\vendia_project\\\\src\\\\DevicePage.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { vendiaClient } from \"./VendiaClient\";\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nexport const DevicePage = () => {\n  _s();\n  const [testList, setTestList] = useState([]);\n  useEffect(() => {\n    const filterTests = async () => {\n      const filteredTestList = await client.entities.test.list({\n        filter: {\n          Device: {\n            contains: 'Device1'\n          }\n        }\n      });\n\n      //console.log(filteredTestList?.items);\n      setTestList(filteredTestList === null || filteredTestList === void 0 ? void 0 : filteredTestList.items);\n    };\n    //console.log({testList});\n\n    filterTests();\n  }, []);\n  const processRowUpdate = React.useCallback(async row => {\n    const response = await row;\n    const response2 = await client.entities.test.update({\n      _id: response.ID,\n      Device: response.Device,\n      TestID: response.TestID,\n      OrgAssignment: response.OrgAssignment,\n      TestName: response.TestName,\n      TestMethod: response.TestMethod,\n      Notes: response.Notes,\n      UpdatedBy: response.UpdatedBy\n    });\n\n    //console.log(' ');\n    return row;\n  }, []);\n  const handleProcessRowUpdateError = React.useCallback(error => {\n    console.log(error.message);\n  }, []);\n  const removeNull = value => {\n    if (typeof value === 'boolean') return 'true';else return 'false';\n  };\n  const columns = [{\n    field: 'ID',\n    headerName: 'ID',\n    width: 300,\n    editable: false\n  }, {\n    field: 'Device',\n    headerName: 'Device',\n    width: 90,\n    editable: false\n  }, {\n    field: 'TestID',\n    headerName: 'TestID',\n    width: 90,\n    editable: false\n  }, {\n    field: 'OrgAssignment',\n    headerName: 'OrgAssignment',\n    width: 150,\n    editable: true\n  }, {\n    field: 'TestName',\n    headerName: 'TestName',\n    width: 90,\n    editable: true\n  }, {\n    field: 'TestMethod',\n    headerName: 'TestMethod',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Notes',\n    headerName: 'Notes',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Completed',\n    headerName: 'Completed',\n    width: 90,\n    editable: true\n  }, {\n    field: 'UpdatedBy',\n    headerName: 'UpdatedBy',\n    width: 90,\n    editable: true\n  }];\n  const rows = testList === null || testList === void 0 ? void 0 : testList.map(test => ({\n    ID: test._id,\n    Device: test.Device,\n    TestID: test.TestID,\n    OrgAssignment: test.OrgAssignment,\n    TestName: test.TestName,\n    TestMethod: test.TestMethod,\n    Notes: test.Notes,\n    Completed: removeNull(test.Completed),\n    UpdatedBy: test.UpdatedBy\n  }));\n\n  //console.log(testList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DevicePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Device1 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        getRowId: rows => rows === null || rows === void 0 ? void 0 : rows.TestID,\n        disableColumnFilter: true,\n        disableColumnSelector: true,\n        disableDensitySelector: true,\n        slots: {\n          toolbar: GridToolbarQuickFilter\n        },\n        processRowUpdate: processRowUpdate,\n        onProcessRowUpdateError: handleProcessRowUpdateError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(DevicePage, \"KVcPPnfNNL6soMJYwZC6cuOIxYo=\");\n_c = DevicePage;\nvar _c;\n$RefreshReg$(_c, \"DevicePage\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","DataGrid","GridToolbarQuickFilter","jsxDEV","_jsxDEV","client","DevicePage","_s","testList","setTestList","filterTests","filteredTestList","entities","test","list","filter","Device","contains","items","processRowUpdate","useCallback","row","response","response2","update","_id","ID","TestID","OrgAssignment","TestName","TestMethod","Notes","UpdatedBy","handleProcessRowUpdateError","error","console","log","message","removeNull","value","columns","field","headerName","width","editable","rows","map","Completed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getRowId","disableColumnFilter","disableColumnSelector","disableDensitySelector","slots","toolbar","onProcessRowUpdateError","_c","$RefreshReg$"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/src/DevicePage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./VendiaClient\";\r\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\r\n\r\nconst { client } = vendiaClient();\r\n\r\n\r\nexport const DevicePage = () => {\r\n\r\n    const [testList, setTestList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const filterTests = async () => {\r\n            const filteredTestList = await client.entities.test.list({\r\n                filter: {\r\n                  Device: {\r\n                    contains: 'Device1',\r\n                  }\r\n                },\r\n              })\r\n\r\n            //console.log(filteredTestList?.items);\r\n            setTestList(filteredTestList?.items);\r\n\r\n        }\r\n        //console.log({testList});\r\n\r\n        filterTests();\r\n        \r\n    }, [])\r\n\r\n    const processRowUpdate = React.useCallback(\r\n        async (row) => {\r\n\r\n            const response = await row;\r\n            const response2 = await client.entities.test.update({\r\n                _id: response.ID,\r\n                Device: response.Device,\r\n                TestID: response.TestID,\r\n                OrgAssignment: response.OrgAssignment,\r\n                TestName: response.TestName,\r\n                TestMethod: response.TestMethod,\r\n                Notes: response.Notes,\r\n                UpdatedBy: response.UpdatedBy\r\n                \r\n\r\n              });\r\n \r\n\r\n\r\n            //console.log(' ');\r\n            return row;\r\n        },\r\n        [],\r\n\r\n    );\r\n\r\n\r\n\r\n    const handleProcessRowUpdateError = React.useCallback((error) => {\r\n        console.log(error.message);\r\n      }, []);\r\n    \r\n\r\n    const removeNull = (value) =>\r\n    {\r\n        if(typeof(value) === 'boolean')\r\n            return 'true';\r\n        else\r\n            return 'false'\r\n    }\r\n    \r\n\r\n    const columns = [\r\n        {field: 'ID', headerName: 'ID', width: 300, editable: false},\r\n        {field: 'Device', headerName: 'Device', width: 90, editable: false},\r\n        {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\r\n        {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\r\n        {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\r\n        {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\r\n        {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\r\n        {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\r\n        {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\r\n    ];\r\n    \r\n   \r\n    const rows = testList?.map((test) => ({\r\n        ID: test._id,\r\n        Device: test.Device,\r\n        TestID: test.TestID,\r\n        OrgAssignment: test.OrgAssignment,\r\n        TestName: test.TestName,\r\n        TestMethod: test.TestMethod,\r\n        Notes: test.Notes,\r\n        Completed: removeNull(test.Completed),\r\n        UpdatedBy: test.UpdatedBy\r\n        \r\n    }));\r\n    \r\n    \r\n      \r\n    //console.log(testList);\r\n    return(\r\n        \r\n        <div className=\"DevicePage\">\r\n            <h1> Device1 </h1>\r\n            <div>\r\n                <DataGrid\r\n                rows = {rows}\r\n                columns = {columns}\r\n                \r\n                getRowId={(rows) =>  rows?.TestID}\r\n                disableColumnFilter\r\n                disableColumnSelector\r\n                disableDensitySelector\r\n                slots={{ toolbar: GridToolbarQuickFilter }}\r\n                processRowUpdate={processRowUpdate}\r\n                onProcessRowUpdateError={handleProcessRowUpdateError}\r\n                \r\n                />\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}