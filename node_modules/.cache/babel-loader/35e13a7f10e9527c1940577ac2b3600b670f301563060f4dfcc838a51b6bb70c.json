{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Games\\\\Desktop\\\\Homework\\\\vendia_project\\\\src\\\\DevicePage.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { vendiaClient } from \"./vendiaClient\";\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport Button from '@mui/material/Button';\nimport { Link } from 'react-router-dom';\n//import { filterStateInitializer } from \"@mui/x-data-grid/internals\";\nimport \"./Archive.css\";\nimport \"./App.css\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nexport const DevicePage = () => {\n  _s();\n  const userOrgs = [\"QA\", \"R&D\"];\n  let {\n    DeviceName,\n    DeviceTitle\n  } = useParams();\n  const [rows, setRows] = useState([]);\n  const [rowSelection, setRowSelection] = useState([]);\n  useEffect(() => {\n    const loadData = async () => {\n      const tempFilteredTestList = await client.entities.test.list({\n        filter: {\n          Device: {\n            contains: DeviceName.toString()\n          }\n        }\n      });\n      const tempRows = tempFilteredTestList === null || tempFilteredTestList === void 0 ? void 0 : tempFilteredTestList.items.map(test => ({\n        ID: test._id,\n        //Device: test.Device,\n        TestID: test.TestID,\n        OrgAssignment: test.OrgAssignment,\n        TestName: test.TestName,\n        TestMethod: test.TestMethod,\n        Notes: test.Notes,\n        Completed: removeNull(test.Completed),\n        UpdatedBy: test.UpdatedBy\n      }));\n      setRows(tempRows);\n      //console.log(tempRows);\n    };\n\n    loadData();\n  }, []);\n  const columns = [{\n    field: 'ID',\n    headerName: 'ID',\n    width: 300,\n    editable: false\n  },\n  //{field: 'Device', headerName: 'Device', width: 90, editable: false},\n  {\n    field: 'TestID',\n    headerName: 'TestID',\n    width: 90,\n    editable: false\n  }, {\n    field: 'OrgAssignment',\n    headerName: 'OrgAssignment',\n    width: 150,\n    editable: true\n  }, {\n    field: 'TestName',\n    headerName: 'TestName',\n    width: 90,\n    editable: true\n  }, {\n    field: 'TestMethod',\n    headerName: 'TestMethod',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Notes',\n    headerName: 'Notes',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Completed',\n    headerName: 'Completed',\n    width: 90,\n    editable: true\n  }, {\n    field: 'UpdatedBy',\n    headerName: 'UpdatedBy',\n    width: 90,\n    editable: true\n  }];\n  const removeNull = value => {\n    if (typeof value === 'boolean') return true;else return false;\n  };\n  const editRow = async row => {\n    const oldRow = await row;\n    const newRow = await client.entities.test.update({\n      _id: oldRow.ID,\n      //Device: oldRow.Device,\n      TestID: oldRow.TestID,\n      OrgAssignment: oldRow.OrgAssignment,\n      TestName: oldRow.TestName,\n      TestMethod: oldRow.TestMethod,\n      Notes: oldRow.Notes,\n      Completed: oldRow.Completed,\n      UpdatedBy: oldRow.UpdatedBy\n    });\n    return row;\n  };\n  const deleteRow = async () => {\n    var table = client.entities.test;\n    for (let i = 0; i < rowSelection.length; i++) {\n      await table.remove(rowSelection[i]);\n    }\n    const tempFilteredTestList = await client.entities.test.list({\n      filter: {\n        Device: {\n          contains: DeviceName.toString()\n        }\n      }\n    });\n    const tempRows = tempFilteredTestList === null || tempFilteredTestList === void 0 ? void 0 : tempFilteredTestList.items.map(test => ({\n      ID: test._id,\n      //Device: test.Device,\n      TestID: test.TestID,\n      OrgAssignment: test.OrgAssignment,\n      TestName: test.TestName,\n      TestMethod: test.TestMethod,\n      Notes: test.Notes,\n      Completed: removeNull(test.Completed),\n      UpdatedBy: test.UpdatedBy\n    }));\n    setRows(tempRows);\n  };\n  const isOrgAssigned = orgAssignment => {\n    var output;\n    for (let i = 0; i < userOrgs.length; i++) {\n      console.log(userOrgs[i]);\n      if (orgAssignment === userOrgs[i]) output = true;else output = false;\n    }\n    return output;\n  };\n  const handleProcessRowUpdateError = React.useCallback(error => {\n    console.log(error.message);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"archive\",\n      children: /*#__PURE__*/_jsxDEV(\"caption\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/Home\",\n            className: \"home-return-to-home-button\",\n            children: \"Back to Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), DeviceTitle, /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(RemoveCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 52\n          }, this),\n          onClick: deleteRow,\n          children: \"Remove Entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: rows,\n          columns: columns,\n          getRowId: rows => rows === null || rows === void 0 ? void 0 : rows.ID,\n          initialState: {\n            columns: {\n              columnVisibilityModel: {\n                // Hide columns status and traderName, the other columns will remain visible\n                ID: true\n              }\n            }\n          },\n          isCellEditable: params => isOrgAssigned(params.row.OrgAssignment) === true,\n          disableColumnFilter: true,\n          disableColumnSelector: true,\n          disableDensitySelector: true,\n          disableRowSelectionOnClick: true,\n          checkboxSelection: true,\n          onRowSelectionModelChange: newRowSelection => {\n            setRowSelection(newRowSelection);\n          },\n          slots: {\n            toolbar: GridToolbarQuickFilter\n          },\n          processRowUpdate: editRow,\n          onProcessRowUpdateError: handleProcessRowUpdateError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n\n// import React from \"react\";\n// import { useEffect, useState } from \"react\";\n// import { vendiaClient } from \"./VendiaClient\";\n// import { Link } from 'react-router-dom';\n// import { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\n// import RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\n// import Button from '@mui/material/Button';\n// import \"./Archive.css\";\n// import \"./App.css\";\n\n// import { useParams } from 'react-router-dom';\n\n// const { client } = vendiaClient();\n\n// export const DevicePage = () => {\n\n//     let { DeviceName, DeviceTitle } = useParams();\n//     const [testList, setTestList] = useState([]);\n//     const [selectedIDs, setSelectedIDs] = useState([]);\n\n//     useEffect(() => {\n//         const filterTests = async () => {\n//             const filteredTestList = await client.entities.test.list({\n//                 filter: {\n//                   Device: {\n//                     contains: DeviceName.toString(),\n//                   }\n//                 },\n//               })\n//             setTestList(filteredTestList?.items);\n//         }\n//         filterTests();\n//     }, [])\n\n//     const editRow = React.useCallback(\n//         async (row) => {\n\n//             const oldRow = await row;\n//             const newRow = await client.entities.test.update({\n//                 _id: oldRow.ID,\n//                 Device: oldRow.Device,\n//                 TestID: oldRow.TestID,\n//                 OrgAssignment: oldRow.OrgAssignment,\n//                 TestName: oldRow.TestName,\n//                 TestMethod: oldRow.TestMethod,\n//                 Notes: oldRow.Notes,\n//                 Completed: oldRow.Completed,\n//                 UpdatedBy: oldRow.UpdatedBy\n//               });\n//             return row;\n//         },\n//         [],\n\n//     );\n\n//     const deleteRow = () =>\n//     {\n//         selectedIDs.forEach((index) => console.log(index));\n//     }\n\n//     const handleProcessRowUpdateError = React.useCallback((error) => {\n//         console.log(error.message);\n//     }, []);\n\n//     const removeNull = (value) =>\n//     {\n//         if(typeof(value) === 'boolean')\n//             return true;\n//         else\n//             return false;\n//     }\n\n//     const columns = [\n//         {field: 'ID', headerName: 'ID', width: 300, editable: false},\n//         {field: 'Device', headerName: 'Device', width: 90, editable: false},\n//         {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\n//         {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\n//         {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\n//         {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\n//         {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\n//         {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\n//         {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\n//     ];\n\n//     const rows = testList?.map((test) => ({\n//         ID: test._id,\n//         Device: test.Device,\n//         TestID: test.TestID,\n//         OrgAssignment: test.OrgAssignment,\n//         TestName: test.TestName,\n//         TestMethod: test.TestMethod,\n//         Notes: test.Notes,\n//         Completed: removeNull(test.Completed),\n//         UpdatedBy: test.UpdatedBy\n\n//     }));\n\n//     const boolToString = (value) =>\n//     {\n//         if(typeof(value) === 'boolean')\n//             return 'true';\n//         else\n//             return 'false'\n//     }\n\n//     return(\n//         <div className=\"home-container\">\n//         <div className=\"archive\">\n//             <caption> \n//                 <div>\n//                     <Link to=\"/Home\" className=\"home-return-to-home-button\">Back to Home</Link>\n//                 </div>\n//                 {DeviceTitle}\n//             <div> \n//                 <Button color=\"primary\" startIcon={<RemoveCircleIcon/>} onClick={deleteRow}>\n//                     Remove Entry\n//                 </Button>\n//                 <DataGrid\n//                 rows = {rows}\n//                 columns = {columns}\n//                 getRowId={(rows) =>  rows?.ID}\n//                 disableColumnFilter\n//                 disableColumnSelector\n//                 disableDensitySelector\n//                 checkboxSelection\n//                 disableRowSelectionOnClick\n//                 onRowSelectionModelChange={(IDs) => {\n//                     setSelectedIDs(IDs);\n//                 }}\n\n//                 slots={{ toolbar: GridToolbarQuickFilter }}\n//                 processRowUpdate={editRow}\n//                 onProcessRowUpdateError={handleProcessRowUpdateError}\n//                 />\n//             </div>\n//             </caption> \n//         </div>\n//         </div>\n//     )\n// }\n_s(DevicePage, \"OmmA5p7NfYGRJJDI3oTKE5vqe8k=\", false, function () {\n  return [useParams];\n});\n_c = DevicePage;\nexport default DevicePage;\nvar _c;\n$RefreshReg$(_c, \"DevicePage\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","DataGrid","GridToolbarQuickFilter","RemoveCircleIcon","Button","Link","useParams","jsxDEV","_jsxDEV","client","DevicePage","_s","userOrgs","DeviceName","DeviceTitle","rows","setRows","rowSelection","setRowSelection","loadData","tempFilteredTestList","entities","test","list","filter","Device","contains","toString","tempRows","items","map","ID","_id","TestID","OrgAssignment","TestName","TestMethod","Notes","Completed","removeNull","UpdatedBy","columns","field","headerName","width","editable","value","editRow","row","oldRow","newRow","update","deleteRow","table","i","length","remove","isOrgAssigned","orgAssignment","output","console","log","handleProcessRowUpdateError","useCallback","error","message","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","color","startIcon","onClick","getRowId","initialState","columnVisibilityModel","isCellEditable","params","disableColumnFilter","disableColumnSelector","disableDensitySelector","disableRowSelectionOnClick","checkboxSelection","onRowSelectionModelChange","newRowSelection","slots","toolbar","processRowUpdate","onProcessRowUpdateError","_c","$RefreshReg$"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/src/DevicePage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./vendiaClient\";\r\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\nimport Button from '@mui/material/Button';\r\nimport { Link } from 'react-router-dom';\r\n//import { filterStateInitializer } from \"@mui/x-data-grid/internals\";\r\nimport \"./Archive.css\";\r\nimport \"./App.css\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst { client } = vendiaClient();\r\n\r\nexport const DevicePage = () => {\r\n    const userOrgs = [\"QA\", \"R&D\"];\r\n\r\n    let { DeviceName, DeviceTitle } = useParams();\r\n    const [rows, setRows] = useState([]);\r\n    const [rowSelection, setRowSelection] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            const tempFilteredTestList = await client.entities.test.list({\r\n                filter: {\r\n                  Device: {\r\n                    contains: DeviceName.toString(),\r\n                  }\r\n                },\r\n            });\r\n\r\n\r\n            const tempRows = tempFilteredTestList?.items.map((test) => ({\r\n                ID: test._id,\r\n                //Device: test.Device,\r\n                TestID: test.TestID,\r\n                OrgAssignment: test.OrgAssignment,\r\n                TestName: test.TestName,\r\n                TestMethod: test.TestMethod,\r\n                Notes: test.Notes,\r\n                Completed: removeNull(test.Completed),\r\n                UpdatedBy: test.UpdatedBy\r\n                \r\n            }));\r\n            setRows(tempRows);\r\n            //console.log(tempRows);\r\n        }\r\n\r\n        \r\n        loadData();\r\n    }, []); \r\n\r\n    \r\n\r\n    const columns = [\r\n        {field: 'ID', headerName: 'ID', width: 300, editable: false},\r\n        //{field: 'Device', headerName: 'Device', width: 90, editable: false},\r\n        {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\r\n        {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\r\n        {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\r\n        {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\r\n        {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\r\n        {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\r\n        {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\r\n    ];\r\n\r\n    const removeNull = (value) =>\r\n    {\r\n        if(typeof(value) === 'boolean')\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    const editRow = async (row) => {\r\n        const oldRow = await row;\r\n        const newRow = await client.entities.test.update({\r\n            _id: oldRow.ID,\r\n            //Device: oldRow.Device,\r\n            TestID: oldRow.TestID,\r\n            OrgAssignment: oldRow.OrgAssignment,\r\n            TestName: oldRow.TestName,\r\n            TestMethod: oldRow.TestMethod,\r\n            Notes: oldRow.Notes,\r\n            Completed: oldRow.Completed,\r\n            UpdatedBy: oldRow.UpdatedBy\r\n                \r\n            });    \r\n \r\n            return row;\r\n    };\r\n\r\n    const deleteRow = async () =>\r\n    {\r\n        var table = client.entities.test;\r\n        \r\n        for (let i = 0; i < rowSelection.length; i++) \r\n        {\r\n            await table.remove(rowSelection[i]);\r\n        }\r\n\r\n        const tempFilteredTestList = await client.entities.test.list({\r\n            filter: {\r\n              Device: {\r\n                contains: DeviceName.toString(),\r\n              }\r\n            },\r\n        });\r\n\r\n        const tempRows = tempFilteredTestList?.items.map((test) => ({\r\n            ID: test._id,\r\n            //Device: test.Device,\r\n            TestID: test.TestID,\r\n            OrgAssignment: test.OrgAssignment,\r\n            TestName: test.TestName,\r\n            TestMethod: test.TestMethod,\r\n            Notes: test.Notes,\r\n            Completed: removeNull(test.Completed),\r\n            UpdatedBy: test.UpdatedBy\r\n            \r\n        }));\r\n        setRows(tempRows);\r\n        \r\n    };\r\n\r\n    const isOrgAssigned = (orgAssignment) =>\r\n    {\r\n        var output;\r\n        for (let i = 0; i < userOrgs.length; i++)\r\n        {\r\n            console.log(userOrgs[i]);\r\n            if (orgAssignment === userOrgs[i])\r\n                output = true;\r\n            else\r\n                output = false;\r\n        }\r\n        return output;\r\n    }\r\n\r\n    const handleProcessRowUpdateError = React.useCallback((error) => {\r\n        console.log(error.message);\r\n      }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <div className=\"archive\">\r\n            <caption> \r\n                <div>\r\n                    <Link to=\"/Home\" className=\"home-return-to-home-button\">Back to Home</Link>\r\n                </div>\r\n                {DeviceTitle}\r\n                <Button color=\"primary\" startIcon={<RemoveCircleIcon/>} onClick={deleteRow}>\r\n                    Remove Entry\r\n                </Button>\r\n                <DataGrid\r\n                    rows = {rows}\r\n                    columns = {columns}\r\n                    getRowId={(rows) =>  rows?.ID}\r\n                    initialState={{\r\n                        columns: {\r\n                        columnVisibilityModel: {\r\n                            // Hide columns status and traderName, the other columns will remain visible\r\n                            ID: true,\r\n                        },\r\n                        },\r\n                    }}\r\n                    isCellEditable={(params) => isOrgAssigned(params.row.OrgAssignment) === true}\r\n\r\n                    disableColumnFilter\r\n                    disableColumnSelector\r\n                    disableDensitySelector\r\n                    disableRowSelectionOnClick\r\n\r\n                    checkboxSelection\r\n                    onRowSelectionModelChange={(newRowSelection) => {\r\n                        setRowSelection(newRowSelection);\r\n                    }}\r\n                    slots={{ toolbar: GridToolbarQuickFilter }}\r\n                    processRowUpdate={editRow}\r\n                    onProcessRowUpdateError={handleProcessRowUpdateError}\r\n                />\r\n            </caption>\r\n            </div>\r\n         </div>\r\n    )\r\n}\r\n\r\n// import React from \"react\";\r\n// import { useEffect, useState } from \"react\";\r\n// import { vendiaClient } from \"./VendiaClient\";\r\n// import { Link } from 'react-router-dom';\r\n// import { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\r\n// import RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\n// import Button from '@mui/material/Button';\r\n// import \"./Archive.css\";\r\n// import \"./App.css\";\r\n\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const { client } = vendiaClient();\r\n\r\n// export const DevicePage = () => {\r\n\r\n//     let { DeviceName, DeviceTitle } = useParams();\r\n//     const [testList, setTestList] = useState([]);\r\n//     const [selectedIDs, setSelectedIDs] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         const filterTests = async () => {\r\n//             const filteredTestList = await client.entities.test.list({\r\n//                 filter: {\r\n//                   Device: {\r\n//                     contains: DeviceName.toString(),\r\n//                   }\r\n//                 },\r\n//               })\r\n//             setTestList(filteredTestList?.items);\r\n//         }\r\n//         filterTests();\r\n//     }, [])\r\n\r\n//     const editRow = React.useCallback(\r\n//         async (row) => {\r\n\r\n//             const oldRow = await row;\r\n//             const newRow = await client.entities.test.update({\r\n//                 _id: oldRow.ID,\r\n//                 Device: oldRow.Device,\r\n//                 TestID: oldRow.TestID,\r\n//                 OrgAssignment: oldRow.OrgAssignment,\r\n//                 TestName: oldRow.TestName,\r\n//                 TestMethod: oldRow.TestMethod,\r\n//                 Notes: oldRow.Notes,\r\n//                 Completed: oldRow.Completed,\r\n//                 UpdatedBy: oldRow.UpdatedBy\r\n//               });\r\n//             return row;\r\n//         },\r\n//         [],\r\n\r\n//     );\r\n\r\n//     const deleteRow = () =>\r\n//     {\r\n//         selectedIDs.forEach((index) => console.log(index));\r\n//     }\r\n\r\n//     const handleProcessRowUpdateError = React.useCallback((error) => {\r\n//         console.log(error.message);\r\n//     }, []);\r\n    \r\n//     const removeNull = (value) =>\r\n//     {\r\n//         if(typeof(value) === 'boolean')\r\n//             return true;\r\n//         else\r\n//             return false;\r\n//     }\r\n    \r\n//     const columns = [\r\n//         {field: 'ID', headerName: 'ID', width: 300, editable: false},\r\n//         {field: 'Device', headerName: 'Device', width: 90, editable: false},\r\n//         {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\r\n//         {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\r\n//         {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\r\n//         {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\r\n//         {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\r\n//         {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\r\n//         {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\r\n//     ];\r\n    \r\n//     const rows = testList?.map((test) => ({\r\n//         ID: test._id,\r\n//         Device: test.Device,\r\n//         TestID: test.TestID,\r\n//         OrgAssignment: test.OrgAssignment,\r\n//         TestName: test.TestName,\r\n//         TestMethod: test.TestMethod,\r\n//         Notes: test.Notes,\r\n//         Completed: removeNull(test.Completed),\r\n//         UpdatedBy: test.UpdatedBy\r\n        \r\n//     }));\r\n\r\n//     const boolToString = (value) =>\r\n//     {\r\n//         if(typeof(value) === 'boolean')\r\n//             return 'true';\r\n//         else\r\n//             return 'false'\r\n//     }\r\n\r\n//     return(\r\n//         <div className=\"home-container\">\r\n//         <div className=\"archive\">\r\n//             <caption> \r\n//                 <div>\r\n//                     <Link to=\"/Home\" className=\"home-return-to-home-button\">Back to Home</Link>\r\n//                 </div>\r\n//                 {DeviceTitle}\r\n//             <div> \r\n//                 <Button color=\"primary\" startIcon={<RemoveCircleIcon/>} onClick={deleteRow}>\r\n//                     Remove Entry\r\n//                 </Button>\r\n//                 <DataGrid\r\n//                 rows = {rows}\r\n//                 columns = {columns}\r\n//                 getRowId={(rows) =>  rows?.ID}\r\n//                 disableColumnFilter\r\n//                 disableColumnSelector\r\n//                 disableDensitySelector\r\n//                 checkboxSelection\r\n//                 disableRowSelectionOnClick\r\n//                 onRowSelectionModelChange={(IDs) => {\r\n//                     setSelectedIDs(IDs);\r\n//                 }}\r\n\r\n//                 slots={{ toolbar: GridToolbarQuickFilter }}\r\n//                 processRowUpdate={editRow}\r\n//                 onProcessRowUpdateError={handleProcessRowUpdateError}\r\n//                 />\r\n//             </div>\r\n//             </caption> \r\n//         </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport default DevicePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}