{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { gridVirtualizationEnabledSelector, gridVirtualizationColumnEnabledSelector } from './gridVirtualizationSelectors';\n\n// Uses binary search to avoid looping through all possible positions\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector);\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const {\n    ref,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContextState] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  // Each visible row (not to be confused with a filter result) is composed of a central row element\n  // and up to two additional row elements for pinned columns (left and right).\n  // When hovering any of these elements, the :hover styles are applied only to the row element that\n  // was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // we add/remove the .Mui-hovered class to all of the row elements inside one visible row.\n  const [hoveredRowId, setHoveredRowId] = React.useState(null);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) => {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    let focusedCellColumnIndexNotInRange;\n    const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  const indexOfColumnWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(column => column.field === cellFocus.field);\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (!enabled) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    if (enabledForColumns) {\n      let hasRowWithAutoHeight = false;\n      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      });\n      for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n        const row = currentPage.rows[i];\n        hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n      }\n      if (!hasRowWithAutoHeight) {\n        firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n        lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n      }\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [enabled, enabledForColumns, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (enabled) {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    } else {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    }\n  }, [enabled]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const getRenderContext = React.useCallback(() => prevRenderContext.current, []);\n  const setRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContextState(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContextState, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    setRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, setRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = enabled ? computeRenderContext() : prevRenderContext.current;\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        setRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const indexOfRowWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(row => row.id === cellFocus.id);\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  useGridApiEventHandler(apiRef, 'rowMouseOver', (params, event) => {\n    var _params$id;\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId((_params$id = params.id) != null ? _params$id : null);\n  });\n  useGridApiEventHandler(apiRef, 'rowMouseOut', (params, event) => {\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId(null);\n  });\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = enabled ? rootProps.rowBuffer : 0;\n    const columnBuffer = enabled ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    let isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    let isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    const {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        hovered: hoveredRowId === id,\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (inputProps = {}) => _extends({\n      ref: handleRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove\n    }, inputProps, {\n      style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,\n      role: 'presentation'\n    }),\n    getContentProps: ({\n      style\n    } = {}) => ({\n      style: style ? _extends({}, style, contentSize) : contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef,\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","gridVirtualizationEnabledSelector","gridVirtualizationColumnEnabledSelector","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","MEMOIZE_OPTIONS","maxSize","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","enabled","enabledForColumns","ref","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContextState","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","hoveredRowId","setHoveredRowId","rowStyleCache","Object","create","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","minFirstColumn","maxLastColumn","indexOfColumnWithFocusedCell","focusedCellColumnIndexNotInRange","renderedColumns","slice","useMemo","findIndex","column","field","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","rowHasAutoHeight","id","scrollLeft","scrollTop","style","transform","clientWidth","clientHeight","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","visibleRows","direction","state","getRenderContext","setRenderContext","publishEvent","initialRenderContext","params","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","indexOfRowWithFocusedCell","_params$id","contains","relatedTarget","getRows","_rootProps$slotProps","onRowRender","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","calculateColSpan","rowId","isRowWithFocusedCellNotInRange","rowWithFocusedCell","unshift","isColumnWihFocusedCellNotInRange","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","model","isRowNotVisible","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","columnWithFocusedCellNotInRange","undefined","renderedColumnsWithFocusedCell","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","isNotVisible","rowHeight","selected","containerWidth","isLastVisible","hovered","needsHorizontalScrollbar","contentSize","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","register","getRootProps","inputProps","onScroll","onWheel","onTouchMove","role","getContentProps","getRenderZoneProps"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { gridVirtualizationEnabledSelector, gridVirtualizationColumnEnabledSelector } from './gridVirtualizationSelectors';\n\n// Uses binary search to avoid looping through all possible positions\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector);\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const {\n    ref,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContextState] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  // Each visible row (not to be confused with a filter result) is composed of a central row element\n  // and up to two additional row elements for pinned columns (left and right).\n  // When hovering any of these elements, the :hover styles are applied only to the row element that\n  // was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // we add/remove the .Mui-hovered class to all of the row elements inside one visible row.\n  const [hoveredRowId, setHoveredRowId] = React.useState(null);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) => {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    let focusedCellColumnIndexNotInRange;\n    const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  const indexOfColumnWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(column => column.field === cellFocus.field);\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (!enabled) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    if (enabledForColumns) {\n      let hasRowWithAutoHeight = false;\n      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      });\n      for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n        const row = currentPage.rows[i];\n        hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n      }\n      if (!hasRowWithAutoHeight) {\n        firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n        lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n      }\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [enabled, enabledForColumns, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (enabled) {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    } else {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    }\n  }, [enabled]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const getRenderContext = React.useCallback(() => prevRenderContext.current, []);\n  const setRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContextState(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContextState, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    setRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, setRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = enabled ? computeRenderContext() : prevRenderContext.current;\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        setRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const indexOfRowWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(row => row.id === cellFocus.id);\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  useGridApiEventHandler(apiRef, 'rowMouseOver', (params, event) => {\n    var _params$id;\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId((_params$id = params.id) != null ? _params$id : null);\n  });\n  useGridApiEventHandler(apiRef, 'rowMouseOut', (params, event) => {\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId(null);\n  });\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = enabled ? rootProps.rowBuffer : 0;\n    const columnBuffer = enabled ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    let isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    let isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    const {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        hovered: hoveredRowId === id,\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (inputProps = {}) => _extends({\n      ref: handleRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove\n    }, inputProps, {\n      style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,\n      role: 'presentation'\n    }),\n    getContentProps: ({\n      style\n    } = {}) => ({\n      style: style ? _extends({}, style, contentSize) : contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef,\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}