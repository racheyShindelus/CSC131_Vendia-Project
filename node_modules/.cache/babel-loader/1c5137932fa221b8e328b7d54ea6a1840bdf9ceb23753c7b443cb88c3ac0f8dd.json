{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Games\\\\Desktop\\\\Homework\\\\vendia_project\\\\src\\\\DevicePage2.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { vendiaClient } from \"./VendiaClient\";\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport Button from '@mui/material/Button';\nimport { filterStateInitializer } from \"@mui/x-data-grid/internals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nexport const DevicePage2 = () => {\n  _s();\n  const [testList, setTestList] = useState([]);\n  const [filteredTestList, setFilteredTest] = useState([]);\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    const loadData = async () => {\n      const tempTestList = client.entities.test;\n      setTestList(await tempTestList.list());\n      //console.log(await tempTestList.list());\n\n      const tempFilteredTestList = await tempTestList.list({\n        filter: {\n          Device: {\n            contains: 'Device1'\n          }\n        }\n      });\n      setFilteredTest(tempFilteredTestList);\n      //console.log(tempTestList);\n\n      const tempRows = tempFilteredTestList === null || tempFilteredTestList === void 0 ? void 0 : tempFilteredTestList.items.map(test => ({\n        ID: test._id,\n        //Device: test.Device,\n        TestID: test.TestID,\n        OrgAssignment: test.OrgAssignment,\n        TestName: test.TestName,\n        TestMethod: test.TestMethod,\n        Notes: test.Notes,\n        Completed: removeNull(test.Completed),\n        UpdatedBy: test.UpdatedBy\n      }));\n      setRows(tempRows);\n      //console.log(tempRows);\n    };\n\n    loadData();\n  }, []);\n  const columns = [{\n    field: 'ID',\n    headerName: 'ID',\n    width: 300,\n    editable: false\n  },\n  //{field: 'Device', headerName: 'Device', width: 90, editable: false},\n  {\n    field: 'TestID',\n    headerName: 'TestID',\n    width: 90,\n    editable: false\n  }, {\n    field: 'OrgAssignment',\n    headerName: 'OrgAssignment',\n    width: 150,\n    editable: true\n  }, {\n    field: 'TestName',\n    headerName: 'TestName',\n    width: 90,\n    editable: true\n  }, {\n    field: 'TestMethod',\n    headerName: 'TestMethod',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Notes',\n    headerName: 'Notes',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Completed',\n    headerName: 'Completed',\n    width: 90,\n    editable: true\n  }, {\n    field: 'UpdatedBy',\n    headerName: 'UpdatedBy',\n    width: 90,\n    editable: true\n  }];\n  const removeNull = value => {\n    if (typeof value === 'boolean') return true;else return false;\n  };\n  const editRow = async row => {\n    const oldRow = await row;\n    const newRow = await client.entities.test.update({\n      ID: oldRow.ID,\n      //Device: oldRow.Device,\n      TestID: oldRow.TestID,\n      OrgAssignment: oldRow.OrgAssignment,\n      TestName: oldRow.TestName,\n      TestMethod: oldRow.TestMethod,\n      Notes: oldRow.Notes,\n      Completed: oldRow.Completed,\n      UpdatedBy: oldRow.UpdatedBy\n    });\n\n    //console.log(' ');\n    return row;\n  };\n  const handleProcessRowUpdateError = React.useCallback(error => {\n    console.log(error.message);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Device1\", /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      getRowId: rows => rows === null || rows === void 0 ? void 0 : rows.ID,\n      disableColumnFilter: true,\n      disableColumnSelector: true,\n      disableDensitySelector: true,\n      disableRowSelectionOnClick: true,\n      slots: {\n        toolbar: GridToolbarQuickFilter\n      },\n      processRowUpdate: editRow,\n      onProcessRowUpdateError: handleProcessRowUpdateError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(DevicePage2, \"jvCvnyLYVGA3LFsH9h6pEp44c4Y=\");\n_c = DevicePage2;\nvar _c;\n$RefreshReg$(_c, \"DevicePage2\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","DataGrid","GridToolbarQuickFilter","RemoveCircleIcon","Button","filterStateInitializer","jsxDEV","_jsxDEV","client","DevicePage2","_s","testList","setTestList","filteredTestList","setFilteredTest","rows","setRows","loadData","tempTestList","entities","test","list","tempFilteredTestList","filter","Device","contains","tempRows","items","map","ID","_id","TestID","OrgAssignment","TestName","TestMethod","Notes","Completed","removeNull","UpdatedBy","columns","field","headerName","width","editable","value","editRow","row","oldRow","newRow","update","handleProcessRowUpdateError","useCallback","error","console","log","message","children","getRowId","disableColumnFilter","disableColumnSelector","disableDensitySelector","disableRowSelectionOnClick","slots","toolbar","processRowUpdate","onProcessRowUpdateError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/src/DevicePage2.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./VendiaClient\";\r\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\nimport Button from '@mui/material/Button';\r\nimport { filterStateInitializer } from \"@mui/x-data-grid/internals\";\r\n\r\nconst { client } = vendiaClient();\r\n\r\nexport const DevicePage2 = () => {\r\n\r\n    const [testList, setTestList] = useState([]);\r\n    const [filteredTestList, setFilteredTest] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            const tempTestList = client.entities.test;\r\n\r\n            setTestList(await tempTestList.list());\r\n            //console.log(await tempTestList.list());\r\n\r\n            const tempFilteredTestList = await tempTestList.list({\r\n                filter: {\r\n                  Device: {\r\n                    contains: 'Device1',\r\n                  }\r\n                },\r\n            });\r\n            setFilteredTest(tempFilteredTestList);\r\n            //console.log(tempTestList);\r\n\r\n\r\n            const tempRows = tempFilteredTestList?.items.map((test) => ({\r\n                ID: test._id,\r\n                //Device: test.Device,\r\n                TestID: test.TestID,\r\n                OrgAssignment: test.OrgAssignment,\r\n                TestName: test.TestName,\r\n                TestMethod: test.TestMethod,\r\n                Notes: test.Notes,\r\n                Completed: removeNull(test.Completed),\r\n                UpdatedBy: test.UpdatedBy\r\n                \r\n            }));\r\n            setRows(tempRows);\r\n            //console.log(tempRows);\r\n\r\n        }\r\n\r\n        loadData();\r\n        \r\n        \r\n    }, []);\r\n\r\n    const columns = [\r\n        {field: 'ID', headerName: 'ID', width: 300, editable: false},\r\n        //{field: 'Device', headerName: 'Device', width: 90, editable: false},\r\n        {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\r\n        {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\r\n        {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\r\n        {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\r\n        {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\r\n        {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\r\n        {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\r\n    ];\r\n\r\n    const removeNull = (value) =>\r\n    {\r\n        if(typeof(value) === 'boolean')\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    const editRow = async (row) => {\r\n\r\n        const oldRow = await row;\r\n        const newRow = await client.entities.test.update({\r\n            ID: oldRow.ID,\r\n            //Device: oldRow.Device,\r\n            TestID: oldRow.TestID,\r\n            OrgAssignment: oldRow.OrgAssignment,\r\n            TestName: oldRow.TestName,\r\n            TestMethod: oldRow.TestMethod,\r\n            Notes: oldRow.Notes,\r\n            Completed: oldRow.Completed,\r\n            UpdatedBy: oldRow.UpdatedBy\r\n            \r\n\r\n          });\r\n\r\n\r\n\r\n        //console.log(' ');\r\n        return row;\r\n    };\r\n\r\n    const handleProcessRowUpdateError = React.useCallback((error) => {\r\n        console.log(error.message);\r\n      }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            Device1\r\n            <DataGrid\r\n                rows = {rows}\r\n                columns = {columns}\r\n                getRowId={(rows) =>  rows?.ID}\r\n\r\n                disableColumnFilter\r\n                disableColumnSelector\r\n                disableDensitySelector\r\n                disableRowSelectionOnClick\r\n\r\n                slots={{ toolbar: GridToolbarQuickFilter }}\r\n                processRowUpdate={editRow}\r\n                onProcessRowUpdateError={handleProcessRowUpdateError}\r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}