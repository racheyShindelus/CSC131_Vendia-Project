{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Games\\\\Desktop\\\\Homework\\\\vendia_project\\\\src\\\\DevicePage2.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { vendiaClient } from \"./VendiaClient\";\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport Button from '@mui/material/Button';\n//import { filterStateInitializer } from \"@mui/x-data-grid/internals\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nexport const DevicePage2 = () => {\n  _s();\n  const [filteredTestList, setFilteredTestList] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [rowSelection, setRowSelection] = useState([]);\n  useEffect(() => {\n    const loadData = async () => {\n      const tempFilteredTestList = await client.entities.test.list({\n        filter: {\n          Device: {\n            contains: 'Device1'\n          }\n        }\n      });\n      setFilteredTestList(tempFilteredTestList);\n      //console.log(tempFilteredTestList);\n\n      const tempRows = tempFilteredTestList === null || tempFilteredTestList === void 0 ? void 0 : tempFilteredTestList.items.map(test => ({\n        ID: test._id,\n        //Device: test.Device,\n        TestID: test.TestID,\n        OrgAssignment: test.OrgAssignment,\n        TestName: test.TestName,\n        TestMethod: test.TestMethod,\n        Notes: test.Notes,\n        Completed: removeNull(test.Completed),\n        UpdatedBy: test.UpdatedBy\n      }));\n      setRows(tempRows);\n      //console.log(tempRows);\n    };\n\n    loadData();\n    console.log('loadData');\n  }, []);\n  const columns = [{\n    field: 'ID',\n    headerName: 'ID',\n    width: 300,\n    editable: false\n  },\n  //{field: 'Device', headerName: 'Device', width: 90, editable: false},\n  {\n    field: 'TestID',\n    headerName: 'TestID',\n    width: 90,\n    editable: false\n  }, {\n    field: 'OrgAssignment',\n    headerName: 'OrgAssignment',\n    width: 150,\n    editable: true\n  }, {\n    field: 'TestName',\n    headerName: 'TestName',\n    width: 90,\n    editable: true\n  }, {\n    field: 'TestMethod',\n    headerName: 'TestMethod',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Notes',\n    headerName: 'Notes',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Completed',\n    headerName: 'Completed',\n    width: 90,\n    editable: true\n  }, {\n    field: 'UpdatedBy',\n    headerName: 'UpdatedBy',\n    width: 90,\n    editable: true\n  }];\n  const removeNull = value => {\n    if (typeof value === 'boolean') return true;else return false;\n  };\n  const editRow = async row => {\n    const oldRow = await row;\n    const newRow = await client.entities.test.update({\n      ID: oldRow.ID,\n      //Device: oldRow.Device,\n      TestID: oldRow.TestID,\n      OrgAssignment: oldRow.OrgAssignment,\n      TestName: oldRow.TestName,\n      TestMethod: oldRow.TestMethod,\n      Notes: oldRow.Notes,\n      Completed: oldRow.Completed,\n      UpdatedBy: oldRow.UpdatedBy\n    });\n    return row;\n  };\n  const deleteRow = async () => {\n    var table = client.entities.test;\n\n    //await table.remove(rowSelection[0]);\n\n    for (let i = 0; i < 1; i++) {\n      await table.remove(rowSelection[0]);\n    }\n\n    //rowSelection.forEach(async(i) => await table.remove(i));\n\n    const tempFilteredTestList = await client.entities.test.list({\n      filter: {\n        Device: {\n          contains: 'Device1'\n        }\n      }\n    });\n    setFilteredTestList(tempFilteredTestList);\n    const tempRows = tempFilteredTestList === null || tempFilteredTestList === void 0 ? void 0 : tempFilteredTestList.items.map(test => ({\n      ID: test._id,\n      //Device: test.Device,\n      TestID: test.TestID,\n      OrgAssignment: test.OrgAssignment,\n      TestName: test.TestName,\n      TestMethod: test.TestMethod,\n      Notes: test.Notes,\n      Completed: removeNull(test.Completed),\n      UpdatedBy: test.UpdatedBy\n    }));\n    setRows(tempRows);\n  };\n  const handleProcessRowUpdateError = React.useCallback(error => {\n    console.log(error.message);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Device1\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(RemoveCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 48\n        }, this),\n        onClick: deleteRow,\n        children: \"Remove Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        getRowId: rows => rows === null || rows === void 0 ? void 0 : rows.ID,\n        disableColumnFilter: true,\n        disableColumnSelector: true,\n        disableDensitySelector: true,\n        disableRowSelectionOnClick: true,\n        checkboxSelection: true,\n        onRowSelectionModelChange: newRowSelection => {\n          setRowSelection(newRowSelection);\n        },\n        slots: {\n          toolbar: GridToolbarQuickFilter\n        },\n        processRowUpdate: editRow,\n        onProcessRowUpdateError: handleProcessRowUpdateError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(DevicePage2, \"Etf5+LF+17yOW3msNtD7gWtTuaA=\");\n_c = DevicePage2;\nvar _c;\n$RefreshReg$(_c, \"DevicePage2\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","DataGrid","GridToolbarQuickFilter","RemoveCircleIcon","Button","jsxDEV","_jsxDEV","client","DevicePage2","_s","filteredTestList","setFilteredTestList","rows","setRows","rowSelection","setRowSelection","loadData","tempFilteredTestList","entities","test","list","filter","Device","contains","tempRows","items","map","ID","_id","TestID","OrgAssignment","TestName","TestMethod","Notes","Completed","removeNull","UpdatedBy","console","log","columns","field","headerName","width","editable","value","editRow","row","oldRow","newRow","update","deleteRow","table","i","remove","handleProcessRowUpdateError","useCallback","error","message","children","color","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","getRowId","disableColumnFilter","disableColumnSelector","disableDensitySelector","disableRowSelectionOnClick","checkboxSelection","onRowSelectionModelChange","newRowSelection","slots","toolbar","processRowUpdate","onProcessRowUpdateError","_c","$RefreshReg$"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/src/DevicePage2.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./VendiaClient\";\r\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\nimport Button from '@mui/material/Button';\r\n//import { filterStateInitializer } from \"@mui/x-data-grid/internals\";\r\n\r\nconst { client } = vendiaClient();\r\n\r\nexport const DevicePage2 = () => {\r\n\r\n    const [filteredTestList, setFilteredTestList] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n    const [rowSelection, setRowSelection] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const loadData = async () => {\r\n            const tempFilteredTestList = await client.entities.test.list({\r\n                filter: {\r\n                  Device: {\r\n                    contains: 'Device1',\r\n                  }\r\n                },\r\n            });\r\n            setFilteredTestList(tempFilteredTestList);\r\n            //console.log(tempFilteredTestList);\r\n\r\n\r\n            const tempRows = tempFilteredTestList?.items.map((test) => ({\r\n                ID: test._id,\r\n                //Device: test.Device,\r\n                TestID: test.TestID,\r\n                OrgAssignment: test.OrgAssignment,\r\n                TestName: test.TestName,\r\n                TestMethod: test.TestMethod,\r\n                Notes: test.Notes,\r\n                Completed: removeNull(test.Completed),\r\n                UpdatedBy: test.UpdatedBy\r\n                \r\n            }));\r\n            setRows(tempRows);\r\n            //console.log(tempRows);\r\n\r\n        }\r\n\r\n        loadData();\r\n        console.log('loadData')\r\n    }, []);\r\n\r\n    const columns = [\r\n        {field: 'ID', headerName: 'ID', width: 300, editable: false},\r\n        //{field: 'Device', headerName: 'Device', width: 90, editable: false},\r\n        {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\r\n        {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\r\n        {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\r\n        {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\r\n        {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\r\n        {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\r\n        {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\r\n    ];\r\n\r\n    const removeNull = (value) =>\r\n    {\r\n        if(typeof(value) === 'boolean')\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    const editRow = async (row) => {\r\n        const oldRow = await row;\r\n        const newRow = await client.entities.test.update({\r\n            ID: oldRow.ID,\r\n            //Device: oldRow.Device,\r\n            TestID: oldRow.TestID,\r\n            OrgAssignment: oldRow.OrgAssignment,\r\n            TestName: oldRow.TestName,\r\n            TestMethod: oldRow.TestMethod,\r\n            Notes: oldRow.Notes,\r\n            Completed: oldRow.Completed,\r\n            UpdatedBy: oldRow.UpdatedBy\r\n                \r\n            });    \r\n \r\n            return row;\r\n    };\r\n\r\n    const deleteRow = async () =>\r\n    {\r\n        var table = client.entities.test;\r\n            \r\n        //await table.remove(rowSelection[0]);\r\n        \r\n        for (let i = 0; i < 1; i++) \r\n        {\r\n            await table.remove(rowSelection[0]);\r\n        }\r\n        \r\n\r\n        //rowSelection.forEach(async(i) => await table.remove(i));\r\n\r\n\r\n\r\n        const tempFilteredTestList = await client.entities.test.list({\r\n            filter: {\r\n              Device: {\r\n                contains: 'Device1',\r\n              }\r\n            },\r\n        });\r\n\r\n        setFilteredTestList(tempFilteredTestList);\r\n\r\n        const tempRows = tempFilteredTestList?.items.map((test) => ({\r\n            ID: test._id,\r\n            //Device: test.Device,\r\n            TestID: test.TestID,\r\n            OrgAssignment: test.OrgAssignment,\r\n            TestName: test.TestName,\r\n            TestMethod: test.TestMethod,\r\n            Notes: test.Notes,\r\n            Completed: removeNull(test.Completed),\r\n            UpdatedBy: test.UpdatedBy\r\n            \r\n        }));\r\n        setRows(tempRows);\r\n\r\n\r\n        \r\n    };\r\n\r\n    const handleProcessRowUpdateError = React.useCallback((error) => {\r\n        console.log(error.message);\r\n      }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            Device1\r\n            <div>\r\n            <Button color=\"primary\" startIcon={<RemoveCircleIcon/>} onClick={deleteRow}>\r\n                Remove Entry\r\n            </Button>\r\n            <DataGrid\r\n                rows = {rows}\r\n                columns = {columns}\r\n                getRowId={(rows) =>  rows?.ID}\r\n\r\n                disableColumnFilter\r\n                disableColumnSelector\r\n                disableDensitySelector\r\n                disableRowSelectionOnClick\r\n\r\n                checkboxSelection\r\n                onRowSelectionModelChange={(newRowSelection) => {\r\n                    setRowSelection(newRowSelection);\r\n                  }}\r\n                slots={{ toolbar: GridToolbarQuickFilter }}\r\n                processRowUpdate={editRow}\r\n                onProcessRowUpdateError={handleProcessRowUpdateError}\r\n                \r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}