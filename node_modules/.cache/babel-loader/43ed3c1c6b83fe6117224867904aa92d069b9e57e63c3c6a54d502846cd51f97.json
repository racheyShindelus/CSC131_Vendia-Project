{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Games\\\\Desktop\\\\Homework\\\\vendia_project\\\\src\\\\DevicePage.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { vendiaClient } from \"./VendiaClient\";\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  client\n} = vendiaClient();\nexport const DevicePage = () => {\n  _s();\n  const [testList, setTestList] = useState([]);\n  const [selectedIDs, setSelectedIDs] = useState([]);\n  useEffect(() => {\n    const filterTests = async () => {\n      const filteredTestList = await client.entities.test.list({\n        filter: {\n          Device: {\n            contains: 'Device1'\n          }\n        }\n      });\n\n      //console.log(filteredTestList?.items);\n      setTestList(filteredTestList === null || filteredTestList === void 0 ? void 0 : filteredTestList.items);\n    };\n    //console.log({testList});\n\n    filterTests();\n  }, []);\n  const editRow = async row => {\n    const oldRow = await row;\n    const newRow = await client.entities.test.update({\n      _id: oldRow.ID,\n      Device: oldRow.Device,\n      TestID: oldRow.TestID,\n      OrgAssignment: oldRow.OrgAssignment,\n      TestName: oldRow.TestName,\n      TestMethod: oldRow.TestMethod,\n      Notes: oldRow.Notes,\n      Completed: oldRow.Completed,\n      UpdatedBy: oldRow.UpdatedBy\n    });\n\n    //console.log(' ');\n    return row;\n  };\n\n  /*\r\n  const deleteRow = () =>\r\n  {\r\n      selectedIDs.forEach((index) => console.log(index));\r\n  }\r\n  */\n  const deleteRow = async row => {\n    var currRow = client.entities.test;\n    //selectedIDs.forEach((index) => currRow.remove(index));\n    setSelectedIDs([]);\n    selectedIDs.forEach(index => console.log(index));\n  };\n  const handleProcessRowUpdateError = React.useCallback(error => {\n    console.log(error.message);\n  }, []);\n  const removeNull = value => {\n    if (typeof value === 'boolean') return true;else return false;\n  };\n  const columns = [{\n    field: 'ID',\n    headerName: 'ID',\n    width: 300,\n    editable: false\n  }, {\n    field: 'Device',\n    headerName: 'Device',\n    width: 90,\n    editable: false\n  }, {\n    field: 'TestID',\n    headerName: 'TestID',\n    width: 90,\n    editable: false\n  }, {\n    field: 'OrgAssignment',\n    headerName: 'OrgAssignment',\n    width: 150,\n    editable: true\n  }, {\n    field: 'TestName',\n    headerName: 'TestName',\n    width: 90,\n    editable: true\n  }, {\n    field: 'TestMethod',\n    headerName: 'TestMethod',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Notes',\n    headerName: 'Notes',\n    width: 90,\n    editable: true\n  }, {\n    field: 'Completed',\n    headerName: 'Completed',\n    width: 90,\n    editable: true\n  }, {\n    field: 'UpdatedBy',\n    headerName: 'UpdatedBy',\n    width: 90,\n    editable: true\n  }];\n  const rows = testList === null || testList === void 0 ? void 0 : testList.map(test => ({\n    ID: test._id,\n    Device: test.Device,\n    TestID: test.TestID,\n    OrgAssignment: test.OrgAssignment,\n    TestName: test.TestName,\n    TestMethod: test.TestMethod,\n    Notes: test.Notes,\n    Completed: removeNull(test.Completed),\n    UpdatedBy: test.UpdatedBy\n  }));\n\n  //console.log(testList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DevicePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Device1 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(RemoveCircleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 52\n        }, this),\n        onClick: deleteRow,\n        children: \"Remove Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        getRowId: rows => rows === null || rows === void 0 ? void 0 : rows.ID,\n        disableColumnFilter: true,\n        disableColumnSelector: true,\n        disableDensitySelector: true,\n        checkboxSelection: true,\n        disableRowSelectionOnClick: true,\n        onRowSelectionModelChange: IDs => {\n          setSelectedIDs(IDs);\n        },\n        slots: {\n          toolbar: GridToolbarQuickFilter\n        },\n        processRowUpdate: deleteRow,\n        onProcessRowUpdateError: handleProcessRowUpdateError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n_s(DevicePage, \"oXyggDzW8crniYcfIFJUakmk9c4=\");\n_c = DevicePage;\nvar _c;\n$RefreshReg$(_c, \"DevicePage\");","map":{"version":3,"names":["React","useEffect","useState","vendiaClient","DataGrid","GridToolbarQuickFilter","RemoveCircleIcon","Button","jsxDEV","_jsxDEV","client","DevicePage","_s","testList","setTestList","selectedIDs","setSelectedIDs","filterTests","filteredTestList","entities","test","list","filter","Device","contains","items","editRow","row","oldRow","newRow","update","_id","ID","TestID","OrgAssignment","TestName","TestMethod","Notes","Completed","UpdatedBy","deleteRow","currRow","forEach","index","console","log","handleProcessRowUpdateError","useCallback","error","message","removeNull","value","columns","field","headerName","width","editable","rows","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","color","startIcon","onClick","getRowId","disableColumnFilter","disableColumnSelector","disableDensitySelector","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","IDs","slots","toolbar","processRowUpdate","onProcessRowUpdateError","_c","$RefreshReg$"],"sources":["C:/Users/Games/Desktop/Homework/vendia_project/src/DevicePage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { vendiaClient } from \"./VendiaClient\";\r\nimport { DataGrid, GridToolbarQuickFilter } from \"@mui/x-data-grid\";\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\nimport Button from '@mui/material/Button';\r\n\r\nconst { client } = vendiaClient();\r\n\r\n\r\nexport const DevicePage = () => {\r\n\r\n    const [testList, setTestList] = useState([]);\r\n    const [selectedIDs, setSelectedIDs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const filterTests = async () => {\r\n            const filteredTestList = await client.entities.test.list({\r\n                filter: {\r\n                  Device: {\r\n                    contains: 'Device1',\r\n                  }\r\n                },\r\n              })\r\n\r\n            //console.log(filteredTestList?.items);\r\n            setTestList(filteredTestList?.items);\r\n\r\n        }\r\n        //console.log({testList});\r\n\r\n        filterTests();\r\n        \r\n    }, [])\r\n\r\n    const editRow = async (row) => {\r\n\r\n            const oldRow = await row;\r\n            const newRow = await client.entities.test.update({\r\n                _id: oldRow.ID,\r\n                Device: oldRow.Device,\r\n                TestID: oldRow.TestID,\r\n                OrgAssignment: oldRow.OrgAssignment,\r\n                TestName: oldRow.TestName,\r\n                TestMethod: oldRow.TestMethod,\r\n                Notes: oldRow.Notes,\r\n                Completed: oldRow.Completed,\r\n                UpdatedBy: oldRow.UpdatedBy\r\n                \r\n\r\n              });\r\n \r\n\r\n\r\n            //console.log(' ');\r\n            return row;\r\n        };\r\n\r\n    /*\r\n    const deleteRow = () =>\r\n    {\r\n        selectedIDs.forEach((index) => console.log(index));\r\n    }\r\n    */\r\n   const deleteRow = async (row) => {\r\n            var currRow = client.entities.test;\r\n            //selectedIDs.forEach((index) => currRow.remove(index));\r\n            setSelectedIDs([]);\r\n            selectedIDs.forEach((index) => console.log(index));\r\n            \r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    const handleProcessRowUpdateError = React.useCallback((error) => {\r\n        console.log(error.message);\r\n      }, []);\r\n    \r\n\r\n    const removeNull = (value) =>\r\n    {\r\n        if(typeof(value) === 'boolean')\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    \r\n\r\n    const columns = [\r\n        {field: 'ID', headerName: 'ID', width: 300, editable: false},\r\n        {field: 'Device', headerName: 'Device', width: 90, editable: false},\r\n        {field: 'TestID', headerName: 'TestID', width: 90, editable: false},\r\n        {field: 'OrgAssignment', headerName: 'OrgAssignment', width: 150, editable: true,},\r\n        {field: 'TestName', headerName: 'TestName', width: 90, editable: true,},\r\n        {field: 'TestMethod', headerName: 'TestMethod', width: 90, editable: true,},\r\n        {field: 'Notes', headerName: 'Notes', width: 90, editable: true,},\r\n        {field: 'Completed', headerName: 'Completed', width: 90, editable: true,},\r\n        {field: 'UpdatedBy', headerName: 'UpdatedBy', width: 90, editable: true,},\r\n    ];\r\n    \r\n   \r\n    const rows = testList?.map((test) => ({\r\n        ID: test._id,\r\n        Device: test.Device,\r\n        TestID: test.TestID,\r\n        OrgAssignment: test.OrgAssignment,\r\n        TestName: test.TestName,\r\n        TestMethod: test.TestMethod,\r\n        Notes: test.Notes,\r\n        Completed: removeNull(test.Completed),\r\n        UpdatedBy: test.UpdatedBy\r\n        \r\n    }));\r\n    \r\n    \r\n      \r\n    //console.log(testList);\r\n    return(\r\n        \r\n        <div className=\"DevicePage\">\r\n            <h1> Device1 </h1>\r\n            <div>\r\n\r\n                <Button color=\"primary\" startIcon={<RemoveCircleIcon/>} onClick={deleteRow}>\r\n                    Remove Entry\r\n                </Button>\r\n                <DataGrid\r\n                rows = {rows}\r\n                columns = {columns}\r\n                \r\n                getRowId={(rows) =>  rows?.ID}\r\n                disableColumnFilter\r\n                disableColumnSelector\r\n                disableDensitySelector\r\n                checkboxSelection\r\n                disableRowSelectionOnClick\r\n                onRowSelectionModelChange={(IDs) => {\r\n                    setSelectedIDs(IDs);\r\n                }}\r\n                slots={{ toolbar: GridToolbarQuickFilter }}\r\n                processRowUpdate={deleteRow}\r\n                onProcessRowUpdateError={handleProcessRowUpdateError}\r\n                \r\n                />\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}